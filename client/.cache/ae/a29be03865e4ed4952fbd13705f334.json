{"id":"aB3T","dependencies":[{"name":"/home/yusta/Desktop/test/client/package.json","includedInParent":true,"mtime":1547554751677},{"name":"/home/yusta/Desktop/test/client/node_modules/phaser/package.json","includedInParent":true,"mtime":1547552852568},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"/home/yusta/Desktop/test/client/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/yusta/Desktop/test/client/node_modules/phaser/src/utils/Class.js"},{"name":"../../gameobjects/components","loc":{"line":8,"column":25},"parent":"/home/yusta/Desktop/test/client/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/yusta/Desktop/test/client/node_modules/phaser/src/gameobjects/components/index.js"},{"name":"./DynamicTilemapLayerRender","loc":{"line":9,"column":40},"parent":"/home/yusta/Desktop/test/client/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/yusta/Desktop/test/client/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayerRender.js"},{"name":"../../gameobjects/GameObject","loc":{"line":10,"column":25},"parent":"/home/yusta/Desktop/test/client/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/yusta/Desktop/test/client/node_modules/phaser/src/gameobjects/GameObject.js"},{"name":"../components","loc":{"line":11,"column":32},"parent":"/home/yusta/Desktop/test/client/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/yusta/Desktop/test/client/node_modules/phaser/src/tilemaps/components/index.js"}],"generated":{"js":"var i=require(\"../../utils/Class\"),t=require(\"../../gameobjects/components\"),e=require(\"./DynamicTilemapLayerRender\"),l=require(\"../../gameobjects/GameObject\"),r=require(\"../components\"),n=new i({Extends:l,Mixins:[t.Alpha,t.BlendMode,t.ComputedSize,t.Depth,t.Flip,t.GetBounds,t.Origin,t.Pipeline,t.ScaleMode,t.Transform,t.Visible,t.ScrollFactor,e],initialize:function(i,t,e,n,s,o){l.call(this,i,\"DynamicTilemapLayer\"),this.isTilemap=!0,this.tilemap=t,this.layerIndex=e,this.layer=t.layers[e],this.layer.tilemapLayer=this,this.tileset=[],this.culledTiles=[],this.skipCull=!1,this.tilesDrawn=0,this.tilesTotal=this.layer.width*this.layer.height,this.cullPaddingX=1,this.cullPaddingY=1,this.cullCallback=r.CullTiles,this._renderOrder=0,this.gidMap=[],this.setTilesets(n),this.setAlpha(this.layer.alpha),this.setPosition(s,o),this.setOrigin(),this.setSize(this.layer.tileWidth*this.layer.width,this.layer.tileHeight*this.layer.height),this.initPipeline(\"TextureTintPipeline\")},setTilesets:function(i){var t=[],e=[],l=this.tilemap;Array.isArray(i)||(i=[i]);for(var r=0;r<i.length;r++){var n=i[r];if(\"string\"==typeof n&&(n=l.getTileset(n)),n){e.push(n);for(var s=n.firstgid,o=0;o<n.total;o++)t[s+o]=n}}this.gidMap=t,this.tileset=e},setRenderOrder:function(i){return\"string\"==typeof i&&(i=[\"right-down\",\"left-down\",\"right-up\",\"left-up\"].indexOf(i)),i>=0&&i<4&&(this._renderOrder=i),this},calculateFacesAt:function(i,t){return r.CalculateFacesAt(i,t,this.layer),this},calculateFacesWithin:function(i,t,e,l){return r.CalculateFacesWithin(i,t,e,l,this.layer),this},createFromTiles:function(i,t,e,l,n){return r.CreateFromTiles(i,t,e,l,n,this.layer)},cull:function(i){return this.cullCallback(this.layer,i,this.culledTiles,this._renderOrder)},copy:function(i,t,e,l,n,s,o){return r.Copy(i,t,e,l,n,s,o,this.layer),this},destroy:function(){this.layer.tilemapLayer===this&&(this.layer.tilemapLayer=void 0),this.tilemap=void 0,this.layer=void 0,this.culledTiles.length=0,this.cullCallback=null,this.gidMap=[],this.tileset=[],l.prototype.destroy.call(this)},fill:function(i,t,e,l,n,s){return r.Fill(i,t,e,l,n,s,this.layer),this},filterTiles:function(i,t,e,l,n,s,o){return r.FilterTiles(i,t,e,l,n,s,o,this.layer)},findByIndex:function(i,t,e){return r.FindByIndex(i,t,e,this.layer)},findTile:function(i,t,e,l,n,s,o){return r.FindTile(i,t,e,l,n,s,o,this.layer)},forEachTile:function(i,t,e,l,n,s,o){return r.ForEachTile(i,t,e,l,n,s,o,this.layer),this},getTileAt:function(i,t,e){return r.GetTileAt(i,t,e,this.layer)},getTileAtWorldXY:function(i,t,e,l){return r.GetTileAtWorldXY(i,t,e,l,this.layer)},getTilesWithin:function(i,t,e,l,n){return r.GetTilesWithin(i,t,e,l,n,this.layer)},getTilesWithinShape:function(i,t,e){return r.GetTilesWithinShape(i,t,e,this.layer)},getTilesWithinWorldXY:function(i,t,e,l,n,s){return r.GetTilesWithinWorldXY(i,t,e,l,n,s,this.layer)},hasTileAt:function(i,t){return r.HasTileAt(i,t,this.layer)},hasTileAtWorldXY:function(i,t,e){return r.HasTileAtWorldXY(i,t,e,this.layer)},putTileAt:function(i,t,e,l){return r.PutTileAt(i,t,e,l,this.layer)},putTileAtWorldXY:function(i,t,e,l,n){return r.PutTileAtWorldXY(i,t,e,l,n,this.layer)},putTilesAt:function(i,t,e,l){return r.PutTilesAt(i,t,e,l,this.layer),this},randomize:function(i,t,e,l,n){return r.Randomize(i,t,e,l,n,this.layer),this},removeTileAt:function(i,t,e,l){return r.RemoveTileAt(i,t,e,l,this.layer)},removeTileAtWorldXY:function(i,t,e,l,n){return r.RemoveTileAtWorldXY(i,t,e,l,n,this.layer)},renderDebug:function(i,t){return r.RenderDebug(i,t,this.layer),this},replaceByIndex:function(i,t,e,l,n,s){return r.ReplaceByIndex(i,t,e,l,n,s,this.layer),this},setSkipCull:function(i){return void 0===i&&(i=!0),this.skipCull=i,this},setCullPadding:function(i,t){return void 0===i&&(i=1),void 0===t&&(t=1),this.cullPaddingX=i,this.cullPaddingY=t,this},setCollision:function(i,t,e){return r.SetCollision(i,t,e,this.layer),this},setCollisionBetween:function(i,t,e,l){return r.SetCollisionBetween(i,t,e,l,this.layer),this},setCollisionByProperty:function(i,t,e){return r.SetCollisionByProperty(i,t,e,this.layer),this},setCollisionByExclusion:function(i,t,e){return r.SetCollisionByExclusion(i,t,e,this.layer),this},setCollisionFromCollisionGroup:function(i,t){return r.SetCollisionFromCollisionGroup(i,t,this.layer),this},setTileIndexCallback:function(i,t,e){return r.SetTileIndexCallback(i,t,e,this.layer),this},setTileLocationCallback:function(i,t,e,l,n,s){return r.SetTileLocationCallback(i,t,e,l,n,s,this.layer),this},shuffle:function(i,t,e,l){return r.Shuffle(i,t,e,l,this.layer),this},swapByIndex:function(i,t,e,l,n,s){return r.SwapByIndex(i,t,e,l,n,s,this.layer),this},tileToWorldX:function(i,t){return r.TileToWorldX(i,t,this.layer)},tileToWorldY:function(i,t){return r.TileToWorldY(i,t,this.layer)},tileToWorldXY:function(i,t,e,l){return r.TileToWorldXY(i,t,e,l,this.layer)},weightedRandomize:function(i,t,e,l,n){return r.WeightedRandomize(i,t,e,l,n,this.layer),this},worldToTileX:function(i,t,e){return r.WorldToTileX(i,t,e,this.layer)},worldToTileY:function(i,t,e){return r.WorldToTileY(i,t,e,this.layer)},worldToTileXY:function(i,t,e,l,n){return r.WorldToTileXY(i,t,e,l,n,this.layer)}});module.exports=n;","map":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":35}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":37}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":45}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":77}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":79}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":87}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":120}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":128}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":160}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":162}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":170}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":187}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":189}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":193}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":195}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":52,"column":0},"generated":{"line":1,"column":196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":52,"column":0},"generated":{"line":1,"column":204}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":206}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":213}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":214}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":216}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":222}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":224}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":234}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":236}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":249}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":251}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":257}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":259}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":264}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":266}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":276}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":278}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":287}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":298}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":308}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":310}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":1,"column":320}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":1,"column":322}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":66,"column":0},"generated":{"line":1,"column":330}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":66,"column":0},"generated":{"line":1,"column":332}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":67,"column":0},"generated":{"line":1,"column":345}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":348}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":359}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":368}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":370}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":372}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":374}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":376}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":378}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":381}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":383}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":388}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":393}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":395}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":84,"column":0},"generated":{"line":1,"column":418}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":84,"column":0},"generated":{"line":1,"column":423}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":84,"column":0},"generated":{"line":1,"column":434}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":93,"column":0},"generated":{"line":1,"column":436}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":93,"column":0},"generated":{"line":1,"column":441}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":93,"column":0},"generated":{"line":1,"column":449}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":102,"column":0},"generated":{"line":1,"column":451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":102,"column":0},"generated":{"line":1,"column":456}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":102,"column":0},"generated":{"line":1,"column":467}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":469}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":474}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":480}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":482}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":489}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":492}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":497}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":503}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":516}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":126,"column":0},"generated":{"line":1,"column":521}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":126,"column":0},"generated":{"line":1,"column":526}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":126,"column":0},"generated":{"line":1,"column":534}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":136,"column":0},"generated":{"line":1,"column":537}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":136,"column":0},"generated":{"line":1,"column":542}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":136,"column":0},"generated":{"line":1,"column":554}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":149,"column":0},"generated":{"line":1,"column":557}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":149,"column":0},"generated":{"line":1,"column":562}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":149,"column":0},"generated":{"line":1,"column":572}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":159,"column":0},"generated":{"line":1,"column":574}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":159,"column":0},"generated":{"line":1,"column":579}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":159,"column":0},"generated":{"line":1,"column":590}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":592}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":597}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":608}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":613}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":619}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":625}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":630}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":636}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":181,"column":0},"generated":{"line":1,"column":643}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":181,"column":0},"generated":{"line":1,"column":648}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":181,"column":0},"generated":{"line":1,"column":661}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":193,"column":0},"generated":{"line":1,"column":663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":193,"column":0},"generated":{"line":1,"column":668}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":193,"column":0},"generated":{"line":1,"column":681}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":683}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":688}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":701}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":703}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":713}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":718}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":731}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":733}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":738}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":745}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":748}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":753}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":765}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":768}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":773}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":782}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":787}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":793}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":800}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":805}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":817}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":819}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":249,"column":0},"generated":{"line":1,"column":822}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":249,"column":0},"generated":{"line":1,"column":827}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":839}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":844}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":852}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":857}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":863}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":873}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":878}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":884}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":890}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":895}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":901}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":912}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":917}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":923}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":252,"column":0},"generated":{"line":1,"column":931}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":252,"column":0},"generated":{"line":1,"column":936}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":252,"column":0},"generated":{"line":1,"column":949}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":973}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":985}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":994}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":997}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":1001}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":1003}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":267,"column":0},"generated":{"line":1,"column":1006}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":267,"column":0},"generated":{"line":1,"column":1008}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":1011}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":1013}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":1018}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1026}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1032}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1040}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":272,"column":0},"generated":{"line":1,"column":1045}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":272,"column":0},"generated":{"line":1,"column":1047}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":272,"column":0},"generated":{"line":1,"column":1048}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1052}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1056}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1060}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1062}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1064}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1066}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1068}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1075}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":276,"column":0},"generated":{"line":1,"column":1079}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1080}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1084}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1086}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1088}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":1,"column":1091}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1094}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1111}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1115}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1117}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1119}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1130}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":1,"column":1134}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":285,"column":0},"generated":{"line":1,"column":1136}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1137}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1139}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1144}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1147}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1151}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1155}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1157}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1159}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1168}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1170}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1172}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1174}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1176}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1182}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1186}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1188}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1190}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1193}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":297,"column":0},"generated":{"line":1,"column":1196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":297,"column":0},"generated":{"line":1,"column":1201}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":297,"column":0},"generated":{"line":1,"column":1208}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1210}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1215}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1223}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1226}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1241}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1250}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":1,"column":1253}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":1,"column":1259}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":1,"column":1276}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1280}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1282}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1283}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1308}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1319}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1330}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1338}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1342}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1345}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1348}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1350}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1354}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1359}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1372}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":1,"column":1375}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1381}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1398}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1407}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1409}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":360,"column":0},"generated":{"line":1,"column":1412}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1419}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1421}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1438}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1440}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1442}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1447}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":360,"column":0},"generated":{"line":1,"column":1454}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1460}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1481}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1490}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1492}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1494}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1496}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":382,"column":0},"generated":{"line":1,"column":1499}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1506}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1508}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1529}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1531}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1533}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1535}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1537}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1542}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":382,"column":0},"generated":{"line":1,"column":1549}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1555}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1571}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1580}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1582}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1584}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1586}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1588}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1591}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1598}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1600}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1616}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1618}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1620}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1622}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1624}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1626}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1631}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1639}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1644}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1653}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1656}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1668}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1681}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1686}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1692}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1694}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1699}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1711}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1716}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1731}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1736}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1745}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1747}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1749}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1751}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1753}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1755}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1757}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":448,"column":0},"generated":{"line":1,"column":1760}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1767}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1769}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1774}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1776}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1778}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1780}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1782}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1784}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1786}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1788}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1793}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":448,"column":0},"generated":{"line":1,"column":1800}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":1,"column":1806}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":1,"column":1814}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1825}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1830}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1836}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1851}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1858}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1863}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1869}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1887}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":465,"column":0},"generated":{"line":1,"column":1890}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":465,"column":0},"generated":{"line":1,"column":1895}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":465,"column":0},"generated":{"line":1,"column":1908}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":466,"column":0},"generated":{"line":1,"column":1910}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":466,"column":0},"generated":{"line":1,"column":1915}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":466,"column":0},"generated":{"line":1,"column":1926}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1928}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1933}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1945}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1952}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1954}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1959}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1972}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1977}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1982}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1989}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":471,"column":0},"generated":{"line":1,"column":1992}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":471,"column":0},"generated":{"line":1,"column":1997}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":471,"column":0},"generated":{"line":1,"column":2005}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2008}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2010}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2020}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2028}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2033}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2040}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2045}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2054}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2056}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2058}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2060}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2062}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2064}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":497,"column":0},"generated":{"line":1,"column":2067}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2074}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2076}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2081}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2083}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2085}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2087}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2089}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2091}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2093}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2098}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":497,"column":0},"generated":{"line":1,"column":2105}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2111}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2123}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2132}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2134}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2136}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2138}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2140}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2142}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":1,"column":2144}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2147}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2154}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2156}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2168}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2170}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2172}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2174}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2176}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2178}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2180}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2182}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":1,"column":2187}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2195}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2207}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2216}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2218}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":1,"column":2220}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2223}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2230}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2232}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2244}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2246}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2248}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2250}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":1,"column":2255}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2263}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2272}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2281}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2283}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2287}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2289}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2291}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":1,"column":2293}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2303}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2305}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2314}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2316}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2318}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2320}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2322}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2324}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2326}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2328}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":1,"column":2333}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2341}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2353}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2362}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2364}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2366}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2368}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2370}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2372}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":1,"column":2374}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2377}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2384}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2386}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2398}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2400}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2402}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2404}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2406}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2408}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2410}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2412}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":1,"column":2417}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":1,"column":2424}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":615,"column":0},"generated":{"line":1,"column":2430}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":615,"column":0},"generated":{"line":1,"column":2440}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":615,"column":0},"generated":{"line":1,"column":2449}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":615,"column":0},"generated":{"line":1,"column":2451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":615,"column":0},"generated":{"line":1,"column":2453}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2456}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2463}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2465}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2475}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2477}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2479}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2481}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":1,"column":2486}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":634,"column":0},"generated":{"line":1,"column":2494}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":634,"column":0},"generated":{"line":1,"column":2511}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":634,"column":0},"generated":{"line":1,"column":2520}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":634,"column":0},"generated":{"line":1,"column":2522}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":634,"column":0},"generated":{"line":1,"column":2524}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":634,"column":0},"generated":{"line":1,"column":2526}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2529}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2536}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2538}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2555}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2557}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2559}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2561}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2563}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":1,"column":2568}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":1,"column":2576}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":1,"column":2591}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":1,"column":2600}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":1,"column":2602}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":1,"column":2604}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":1,"column":2606}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":1,"column":2608}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2611}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2618}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2620}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2635}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2637}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2639}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2641}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2643}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2645}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":1,"column":2650}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2658}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2678}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2687}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2689}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":1,"column":2691}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2694}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2701}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2703}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2723}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2725}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2727}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2729}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":1,"column":2734}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2742}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2764}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2773}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2775}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2777}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2779}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2781}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":1,"column":2783}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2786}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2793}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2795}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2817}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2819}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2821}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2823}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2825}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2827}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2829}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":1,"column":2834}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2842}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2852}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2861}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2863}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2866}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2873}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2875}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2885}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2887}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2889}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2894}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":735,"column":0},"generated":{"line":1,"column":2902}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":735,"column":0},"generated":{"line":1,"column":2919}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":735,"column":0},"generated":{"line":1,"column":2928}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":735,"column":0},"generated":{"line":1,"column":2930}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":735,"column":0},"generated":{"line":1,"column":2932}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2935}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2942}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2944}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2961}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2963}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2965}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2967}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":1,"column":2972}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":756,"column":0},"generated":{"line":1,"column":2980}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":756,"column":0},"generated":{"line":1,"column":2990}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":756,"column":0},"generated":{"line":1,"column":2999}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":756,"column":0},"generated":{"line":1,"column":3001}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":756,"column":0},"generated":{"line":1,"column":3003}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":756,"column":0},"generated":{"line":1,"column":3005}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3008}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3015}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3017}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3027}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3029}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3031}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3033}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3035}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":1,"column":3040}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":1,"column":3048}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":1,"column":3065}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":1,"column":3074}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":1,"column":3076}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":1,"column":3078}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":1,"column":3080}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":1,"column":3082}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3085}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3092}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3094}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3111}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3113}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3115}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3117}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3119}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3121}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":1,"column":3126}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":800,"column":0},"generated":{"line":1,"column":3134}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":800,"column":0},"generated":{"line":1,"column":3145}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":800,"column":0},"generated":{"line":1,"column":3154}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":800,"column":0},"generated":{"line":1,"column":3156}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":800,"column":0},"generated":{"line":1,"column":3158}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":800,"column":0},"generated":{"line":1,"column":3160}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":804,"column":0},"generated":{"line":1,"column":3163}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3170}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3172}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3183}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3185}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3187}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3189}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3191}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":1,"column":3196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":804,"column":0},"generated":{"line":1,"column":3203}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":1,"column":3209}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":1,"column":3219}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":1,"column":3228}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":1,"column":3230}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":1,"column":3232}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":1,"column":3234}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":1,"column":3236}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":829,"column":0},"generated":{"line":1,"column":3239}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3246}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3248}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3258}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3260}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3262}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3264}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3266}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3268}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":1,"column":3273}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":829,"column":0},"generated":{"line":1,"column":3280}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":846,"column":0},"generated":{"line":1,"column":3286}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":846,"column":0},"generated":{"line":1,"column":3299}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":846,"column":0},"generated":{"line":1,"column":3308}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":846,"column":0},"generated":{"line":1,"column":3310}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":846,"column":0},"generated":{"line":1,"column":3312}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":846,"column":0},"generated":{"line":1,"column":3314}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3317}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3324}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3326}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3339}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3341}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3343}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3345}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3347}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3352}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":1,"column":3360}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":1,"column":3380}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":1,"column":3389}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":1,"column":3391}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":1,"column":3393}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":1,"column":3395}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":1,"column":3397}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3400}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3407}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3409}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3429}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3431}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3433}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3435}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3437}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3439}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":1,"column":3444}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3452}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3464}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3473}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3475}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":895,"column":0},"generated":{"line":1,"column":3478}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3485}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3487}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3499}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3501}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3503}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3508}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":895,"column":0},"generated":{"line":1,"column":3515}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3521}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3536}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3545}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3547}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3549}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3551}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3553}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3555}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":919,"column":0},"generated":{"line":1,"column":3558}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3565}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3567}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3582}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3584}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3586}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3588}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3590}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3592}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3594}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3599}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":919,"column":0},"generated":{"line":1,"column":3606}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":1,"column":3612}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":1,"column":3624}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":1,"column":3633}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3636}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3648}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3652}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3656}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3659}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3662}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3667}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":1,"column":3676}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3678}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":959,"column":0},"generated":{"line":1,"column":3684}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":959,"column":0},"generated":{"line":1,"column":3699}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":959,"column":0},"generated":{"line":1,"column":3708}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":959,"column":0},"generated":{"line":1,"column":3710}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":967,"column":0},"generated":{"line":1,"column":3713}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":961,"column":0},"generated":{"line":1,"column":3725}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":961,"column":0},"generated":{"line":1,"column":3729}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":961,"column":0},"generated":{"line":1,"column":3733}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":961,"column":0},"generated":{"line":1,"column":3735}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3743}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3747}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3751}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3753}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3756}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3761}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3774}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":965,"column":0},"generated":{"line":1,"column":3776}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":965,"column":0},"generated":{"line":1,"column":3781}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":965,"column":0},"generated":{"line":1,"column":3794}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":967,"column":0},"generated":{"line":1,"column":3796}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":986,"column":0},"generated":{"line":1,"column":3802}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":986,"column":0},"generated":{"line":1,"column":3815}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":986,"column":0},"generated":{"line":1,"column":3824}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":986,"column":0},"generated":{"line":1,"column":3826}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":986,"column":0},"generated":{"line":1,"column":3828}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":990,"column":0},"generated":{"line":1,"column":3831}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":1,"column":3838}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":1,"column":3840}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":1,"column":3853}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":1,"column":3855}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":1,"column":3857}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":1,"column":3859}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":1,"column":3864}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":990,"column":0},"generated":{"line":1,"column":3871}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1011,"column":0},"generated":{"line":1,"column":3877}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1011,"column":0},"generated":{"line":1,"column":3897}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1011,"column":0},"generated":{"line":1,"column":3906}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1011,"column":0},"generated":{"line":1,"column":3908}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1011,"column":0},"generated":{"line":1,"column":3910}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1011,"column":0},"generated":{"line":1,"column":3912}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1015,"column":0},"generated":{"line":1,"column":3915}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3922}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3924}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3944}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3946}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3948}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3950}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3952}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1,"column":3957}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1015,"column":0},"generated":{"line":1,"column":3964}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1039,"column":0},"generated":{"line":1,"column":3970}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1039,"column":0},"generated":{"line":1,"column":3993}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1039,"column":0},"generated":{"line":1,"column":4002}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1039,"column":0},"generated":{"line":1,"column":4004}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1039,"column":0},"generated":{"line":1,"column":4006}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1043,"column":0},"generated":{"line":1,"column":4009}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1041,"column":0},"generated":{"line":1,"column":4016}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1041,"column":0},"generated":{"line":1,"column":4018}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1041,"column":0},"generated":{"line":1,"column":4041}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1041,"column":0},"generated":{"line":1,"column":4043}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1041,"column":0},"generated":{"line":1,"column":4045}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1041,"column":0},"generated":{"line":1,"column":4047}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1041,"column":0},"generated":{"line":1,"column":4052}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1043,"column":0},"generated":{"line":1,"column":4059}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1062,"column":0},"generated":{"line":1,"column":4065}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1062,"column":0},"generated":{"line":1,"column":4089}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1062,"column":0},"generated":{"line":1,"column":4098}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1062,"column":0},"generated":{"line":1,"column":4100}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1062,"column":0},"generated":{"line":1,"column":4102}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1066,"column":0},"generated":{"line":1,"column":4105}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1064,"column":0},"generated":{"line":1,"column":4112}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1064,"column":0},"generated":{"line":1,"column":4114}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1064,"column":0},"generated":{"line":1,"column":4138}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1064,"column":0},"generated":{"line":1,"column":4140}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1064,"column":0},"generated":{"line":1,"column":4142}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1064,"column":0},"generated":{"line":1,"column":4144}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1064,"column":0},"generated":{"line":1,"column":4149}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1066,"column":0},"generated":{"line":1,"column":4156}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1085,"column":0},"generated":{"line":1,"column":4162}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1085,"column":0},"generated":{"line":1,"column":4193}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1085,"column":0},"generated":{"line":1,"column":4202}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1085,"column":0},"generated":{"line":1,"column":4204}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1089,"column":0},"generated":{"line":1,"column":4207}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1087,"column":0},"generated":{"line":1,"column":4214}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1087,"column":0},"generated":{"line":1,"column":4216}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1087,"column":0},"generated":{"line":1,"column":4247}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1087,"column":0},"generated":{"line":1,"column":4249}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1087,"column":0},"generated":{"line":1,"column":4251}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1087,"column":0},"generated":{"line":1,"column":4256}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1089,"column":0},"generated":{"line":1,"column":4263}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1108,"column":0},"generated":{"line":1,"column":4269}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1108,"column":0},"generated":{"line":1,"column":4290}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1108,"column":0},"generated":{"line":1,"column":4299}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1108,"column":0},"generated":{"line":1,"column":4301}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1108,"column":0},"generated":{"line":1,"column":4303}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1112,"column":0},"generated":{"line":1,"column":4306}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1110,"column":0},"generated":{"line":1,"column":4313}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1110,"column":0},"generated":{"line":1,"column":4315}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1110,"column":0},"generated":{"line":1,"column":4336}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1110,"column":0},"generated":{"line":1,"column":4338}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1110,"column":0},"generated":{"line":1,"column":4340}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1110,"column":0},"generated":{"line":1,"column":4342}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1110,"column":0},"generated":{"line":1,"column":4347}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1112,"column":0},"generated":{"line":1,"column":4354}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4360}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4384}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4393}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4395}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4397}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4399}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4401}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1132,"column":0},"generated":{"line":1,"column":4403}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4406}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4413}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4415}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4439}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4441}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4443}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4445}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4447}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4449}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1134,"column":0},"generated":{"line":1,"column":4456}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1136,"column":0},"generated":{"line":1,"column":4463}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1155,"column":0},"generated":{"line":1,"column":4469}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1155,"column":0},"generated":{"line":1,"column":4477}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1155,"column":0},"generated":{"line":1,"column":4486}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1155,"column":0},"generated":{"line":1,"column":4488}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1155,"column":0},"generated":{"line":1,"column":4490}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1155,"column":0},"generated":{"line":1,"column":4492}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1159,"column":0},"generated":{"line":1,"column":4495}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4502}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4504}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4512}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4514}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4516}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4518}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4520}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1157,"column":0},"generated":{"line":1,"column":4525}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1159,"column":0},"generated":{"line":1,"column":4532}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4538}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4550}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4559}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4561}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4563}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4565}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4567}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4569}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1183,"column":0},"generated":{"line":1,"column":4572}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4579}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4581}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4593}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4595}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4597}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4599}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4601}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4603}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4605}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4610}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1183,"column":0},"generated":{"line":1,"column":4617}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4623}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4636}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4645}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1198,"column":0},"generated":{"line":1,"column":4647}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1200,"column":0},"generated":{"line":1,"column":4650}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1200,"column":0},"generated":{"line":1,"column":4657}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1200,"column":0},"generated":{"line":1,"column":4659}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1200,"column":0},"generated":{"line":1,"column":4672}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1200,"column":0},"generated":{"line":1,"column":4674}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1200,"column":0},"generated":{"line":1,"column":4676}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1200,"column":0},"generated":{"line":1,"column":4681}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1215,"column":0},"generated":{"line":1,"column":4689}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1215,"column":0},"generated":{"line":1,"column":4702}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1215,"column":0},"generated":{"line":1,"column":4711}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1215,"column":0},"generated":{"line":1,"column":4713}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1217,"column":0},"generated":{"line":1,"column":4716}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1217,"column":0},"generated":{"line":1,"column":4723}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1217,"column":0},"generated":{"line":1,"column":4725}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1217,"column":0},"generated":{"line":1,"column":4738}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1217,"column":0},"generated":{"line":1,"column":4740}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1217,"column":0},"generated":{"line":1,"column":4742}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1217,"column":0},"generated":{"line":1,"column":4747}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1235,"column":0},"generated":{"line":1,"column":4755}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1235,"column":0},"generated":{"line":1,"column":4769}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1235,"column":0},"generated":{"line":1,"column":4778}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1235,"column":0},"generated":{"line":1,"column":4780}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1235,"column":0},"generated":{"line":1,"column":4782}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1235,"column":0},"generated":{"line":1,"column":4784}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4787}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4794}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4796}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4810}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4812}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4814}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4816}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4818}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1237,"column":0},"generated":{"line":1,"column":4823}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1268,"column":0},"generated":{"line":1,"column":4831}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1268,"column":0},"generated":{"line":1,"column":4849}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1268,"column":0},"generated":{"line":1,"column":4858}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1268,"column":0},"generated":{"line":1,"column":4860}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1268,"column":0},"generated":{"line":1,"column":4862}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1268,"column":0},"generated":{"line":1,"column":4864}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1268,"column":0},"generated":{"line":1,"column":4866}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":4869}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4876}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4878}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4896}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4898}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4900}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4902}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4904}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4906}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4911}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":4918}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1288,"column":0},"generated":{"line":1,"column":4924}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1288,"column":0},"generated":{"line":1,"column":4937}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1288,"column":0},"generated":{"line":1,"column":4946}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1288,"column":0},"generated":{"line":1,"column":4948}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1288,"column":0},"generated":{"line":1,"column":4950}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4953}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4960}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4962}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4975}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4977}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4979}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4981}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1290,"column":0},"generated":{"line":1,"column":4986}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1306,"column":0},"generated":{"line":1,"column":4994}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1306,"column":0},"generated":{"line":1,"column":5007}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1306,"column":0},"generated":{"line":1,"column":5016}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1306,"column":0},"generated":{"line":1,"column":5018}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1306,"column":0},"generated":{"line":1,"column":5020}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5023}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5030}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5032}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5045}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5047}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5049}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5051}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1308,"column":0},"generated":{"line":1,"column":5056}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1327,"column":0},"generated":{"line":1,"column":5064}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1327,"column":0},"generated":{"line":1,"column":5078}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1327,"column":0},"generated":{"line":1,"column":5087}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1327,"column":0},"generated":{"line":1,"column":5089}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1327,"column":0},"generated":{"line":1,"column":5091}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1327,"column":0},"generated":{"line":1,"column":5093}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1327,"column":0},"generated":{"line":1,"column":5095}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5098}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5105}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5107}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5121}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5123}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5125}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5127}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5129}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5131}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1329,"column":0},"generated":{"line":1,"column":5136}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1334,"column":0},"generated":{"line":1,"column":5146}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1334,"column":0},"generated":{"line":1,"column":5153}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1334,"column":0},"generated":{"line":1,"column":5161}}],"sources":{"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar TilemapComponents = require('../components');\r\n\r\n/**\r\n * @classdesc\r\n * A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\r\n * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer.\r\n * \r\n * Use this over a Static Tilemap Layer when you need those features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar DynamicTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        DynamicTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DynamicTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'DynamicTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        // Link the LayerData with this static tilemap layer\r\n        this.layer.tilemapLayer = this;\r\n\r\n        /**\r\n         * The Tileset/s associated with this layer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = [];\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         *\r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * The callback that is invoked when the tiles are culled.\r\n         *\r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         *\r\n         * It will be sent 3 arguments:\r\n         *\r\n         * 1) The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2) The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3) A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         *\r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        /**\r\n         * The rendering (draw) order of the tiles in this layer.\r\n         * \r\n         * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n         * drawing to the right and then moving down to the next row.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * 0 = right-down\r\n         * 1 = left-down\r\n         * 2 = right-up\r\n         * 3 = left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#_renderOrder\r\n         * @type {integer}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._renderOrder = 0;\r\n\r\n        /**\r\n         * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#gidMap\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.14.0\r\n         */\r\n        this.gidMap = [];\r\n\r\n        this.setTilesets(tileset);\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(this.layer.tileWidth * this.layer.width, this.layer.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    },\r\n\r\n    /**\r\n     * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTilesets\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     */\r\n    setTilesets: function (tilesets)\r\n    {\r\n        var gidMap = [];\r\n        var setList = [];\r\n        var map = this.tilemap;\r\n\r\n        if (!Array.isArray(tilesets))\r\n        {\r\n            tilesets = [ tilesets ];\r\n        }\r\n\r\n        for (var i = 0; i < tilesets.length; i++)\r\n        {\r\n            var tileset = tilesets[i];\r\n\r\n            if (typeof tileset === 'string')\r\n            {\r\n                tileset = map.getTileset(tileset);\r\n            }\r\n\r\n            if (tileset)\r\n            {\r\n                setList.push(tileset);\r\n\r\n                var s = tileset.firstgid;\r\n\r\n                for (var t = 0; t < tileset.total; t++)\r\n                {\r\n                    gidMap[s + t] = tileset;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gidMap = gidMap;\r\n        this.tileset = setList;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'string')\r\n        {\r\n            renderOrder = orders.indexOf(renderOrder);\r\n        }\r\n\r\n        if (renderOrder >= 0 && renderOrder < 4)\r\n        {\r\n            this._renderOrder = renderOrder;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles, this._renderOrder);\r\n    },\r\n\r\n    /**\r\n     * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n     * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n     * information in the destination region.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n     * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n     * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        this.gidMap = [];\r\n        this.tileset = [];\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index to fill the area with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces)\r\n    {\r\n        TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n     * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n     * @param {number} width - The width of the area.\r\n     * @param {number} height - The height of the area.\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces)\r\n    {\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes)\r\n    {\r\n        TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces)\r\n    {\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - The index of the tile to search for.\r\n     * @param {integer} newIndex - The index of the tile to replace it with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n     * @since 3.11.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will recieve a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes)\r\n    {\r\n        TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DynamicTilemapLayer;\r\n"},"lineCount":null}},"hash":"3b9a8b9dd66c376d650736482f9dc51c","cacheData":{"env":{}}}